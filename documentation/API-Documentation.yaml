swagger: "2.0"
info:
  title: ReceptionMonk API Documentation
  version: "0.1.0"

securityDefinitions:
  TokenAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /users:
    get:
      summary: Will return the user information whose token is being used, Other parameters will be available with user's own key or super-admin key
      parameters:
        - name: id
          in: query
          description: Fetch user based on the primary key / id.
          type: string
        - name: companyId
          in: query
          description: Fetch users based on the company they belong to.
          type: string
        - name: birthday
          in: query
          description: Returns people whose birthday is today, in ddmm format.
          type: string
      responses:
        200:
          description: Returns user based on parameters and key
          schema:
            type: array
            items:
              $ref: "#/definitions/Users"
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    post:
      summary: Updates user information whose token is being used, Other parameters will be available with user's own key or super-admin key
      parameters:
        - in: body
          name: payload
          description: User objects
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        200:
          description: User updated successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    put:
      summary: Adds users to the portal, This will bypass header authentication as new user will not have a token available
      parameters:
        - in: body
          name: payload
          description: User objects
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        200:
          description: User added successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    delete:
      summary: Deletes users from the portal, Can only delete own account and owner can delete users within org, Only super admin can delete any user
      parameters:
        - in: query
          name: id
          type: string
          description: Delete user based on their id / primary key.
          required: true
      responses:
        200:
          description: User deleted successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
  /orders:
    get:
      summary: Will return the order information whose token is being used or under company owner, Other parameters will be available with user's own key or super-admin key
      parameters:
        - name: id
          in: query
          description: Fetch order based on the primary key / id.
          type: string
        - name: companyId
          in: query
          description: Fetch orders based on the company they belong to.
          type: string
        - name: userId
          in: query
          description: Fetch orders based on the user they belong to.
          type: string
        - name: date
          in: query
          description: Returns orders placed between two epochs provided.
          type: string
      responses:
        200:
          description: Returns all matching orders
          schema:
            type: array
            items:
              $ref: "#/definitions/Orders"
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    post:
      summary: Updates user order whose token is being used will not do anything unless your user account is owner, Other parameters will be available with user's own key or super-admin key
      parameters:
        - in: body
          name: payload
          description: User objects
          required: true
          schema:
            $ref: "#/definitions/Orders"
      responses:
        200:
          description: Order updated successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    put:
      summary: Adds user order whose token is being used will not do anything unless your user account is owner, Other parameters will be available with user's own key or super-admin key
      parameters:
        - in: body
          name: payload
          description: User objects
          required: true
          schema:
            $ref: "#/definitions/Orders"
      responses:
        200:
          description: Order added successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    delete:
      summary: Deletes user order whose token is being used will not do anything unless your user account is owner, Other parameters will be available with user's own key or super-admin key
      parameters:
        - in: query
          name: id
          type: string
          description: Delete order based on their id / primary key.
          required: true
      responses:
        200:
          description: Order deleted successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
  /calllogs:
    get:
      summary: Fetch call logs from the system, Running an empty get will list all of the call logs of that particular user.
      parameters:
        - name: id
          in: query
          description: Fetch call logs based on the primary key / id.
          type: string
        - name: companyId
          in: query
          description: Fetch call logs based on the company they belong to.
          type: string
      responses:
        200:
          description: Returns all matching call logs
          schema:
            type: array
            items:
              $ref: "#/definitions/CallLogs"
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    put:
        summary: Adds call log whose token is being used will not do anything unless your user account is owner, Other parameters will be available with user's own key or super-admin key
        parameters:
          - in: body
            name: payload
            description: User objects
            required: true
            schema:
              $ref: "#/definitions/CallLogs"
        responses:
          200:
            description: Call Log added successfully.
          400:
            description: Bad Request, Incorrect payload or call.
          403:
            description: Unauthorized access, Token doesn't match or works.
          500:
            description: Internal server error
  /orderDetails:
    get:
      summary: Fetch order details from the system, Will only work if you're owner and can see only their own detail.
      parameters:
        - name: id
          in: query
          description: Fetch order details based on the primary key / id.
          type: string
        - name: companyId
          in: query
          description: Fetch order details based on the company they belong to.
          type: string
      responses:
        200:
          description: Returns all matching order details
          schema:
            type: array
            items:
              $ref: "#/definitions/OrderDetails"
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
  
  /extensions:
    get:
      summary: Will return the extension info whose token is being used, Other parameters will be available with user's own key or super-admin key
      parameters:
        - name: id
          in: query
          description: Fetch user based on the primary key / id.
          type: string
        - name: companyId
          in: query
          description: Fetch users based on the company they belong to.
          type: string
      responses:
        200:
          description: Returns user based on parameters and key
          schema:
            type: array
            items:
              $ref: "#/definitions/Extensions"
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    post:
      summary: Updates extension whose token is being used, Other parameters will be available with user's own key or super-admin key
      parameters:
        - in: body
          name: payload
          description: Extension objects
          required: true
          schema:
            $ref: "#/definitions/Extensions"
      responses:
        200:
          description: Extension updated successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    put:
      summary: Adds extension to the portal, This will bypass header authentication as new user will not have a token available
      parameters:
        - in: body
          name: payload
          description: Extension objects
          required: true
          schema:
            $ref: "#/definitions/Extensions"
      responses:
        200:
          description: Extension added successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    delete:
      summary: Deletes extensions from the portal, Can only delete own account and owner can delete users within org, Only super admin can delete any user
      parameters:
        - in: query
          name: id
          type: string
          description: Delete user based on their id / primary key.
          required: true
      responses:
        200:
          description: Extension deleted successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
  
  /wallet:
    get:
      summary: Will return the wallet transaction info whose token is being used (Only owners), Other parameters will be available with user's own key or super-admin key
      parameters:
        - name: id
          in: query
          description: Fetch user based on the primary key / id.
          type: string
        - name: companyId
          in: query
          description: Fetch users based on the company they belong to.
          type: string
      responses:
        200:
          description: Returns wallet info based on parameters and key
          schema:
            type: array
            items:
              $ref: "#/definitions/Wallet"
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    post:
      summary: Updates wallet whose token is being used (Only owner), Other parameters will be available with user's own key or super-admin key
      parameters:
        - in: body
          name: payload
          description: Extension objects
          required: true
          schema:
            $ref: "#/definitions/Wallet"
      responses:
        200:
          description: Wallet Transaction updated successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    put:
      summary: Adds wallet transaction info to the portal, This will bypass header authentication as new user will not have a token available
      parameters:
        - in: body
          name: payload
          description: Wallet objects
          required: true
          schema:
            $ref: "#/definitions/Wallet"
      responses:
        200:
          description: Wallet Transaction added successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error
    delete:
      summary: Deletes wallet transaction from the portal, Can only delete own account and owner can delete users within org, Only super admin can delete any user
      parameters:
        - in: query
          name: id
          type: string
          description: Delete user based on their id / primary key.
          required: true
      responses:
        200:
          description: Wallet transaction deleted successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error

  /orderRenewal:
    get:
      description: Performs order renewal where orders have been expired from an active state, if the state was cancelled we do nothing.
      responses:
        200:
          description: Housekeeping done successfully.
        400:
          description: Bad Request, Incorrect payload or call.
        403:
          description: Unauthorized access, Token doesn't match or works.
        500:
          description: Internal server error


definitions:
  Company:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      gstin:
        type: string
      address:
        type: string
        format: text
      contactNumber:
        type: string
        format: phone
      contactEmail:
        type: string
        format: phone
        
  Users:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
        format: email
      passwordHash:
        type: string
      twoFactorKey:
        type: string
      twoFactorRecoveryCode:
        type: string
      dob:
        type: string
        format: date
      accountType:
        type: string
        enum: ["user","owner"]
      companyId:
        description: Will link to the company account id, in case a company has multiple users
        type: integer
        format: int64
      status:
        type: string
        enum: ["active", "suspended", "deleted", "pendingVerification"]
  
  Products:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      price:
        type: integer
        format: int64
      planValidity:
        type: integer
        format: int64
      description:
        type: string
        description: Markdown description
        format: text
      status:
        type: string
        enum: ["active", "disabled"]

  Orders:
    type: object
    properties:
      id:
        type: integer
        format: int64
      productId:
        type: integer
        format: int64
      placedOn:
        type: integer
        format: int64
        description: Epoch of when the order was placed on
      expiry:
        type: integer
        format: int64
        description: Epoch based on validity of the product calculated based on purchase
      price:
        type: integer
        format: int64
      buyer:
        type: integer
        format: int64
        description: User ID for the user who has purchased this
      status:
        type: string
        enum: ["unpaid", "paid", "cancelled"]
  
  OrderDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderId:
          type: integer
          format: int64
        phoneNumber:
          type: string
          format: phone
        sipServer:
          type: string
        sipUsername:
          type: string
        sipPassword:
          type: string
        sipPort:
          type: string
        isIvrEnabled:
          type: boolean
        ivrFlow:
          type: string
          format: text
        maxAllowedUsers:
          type: integer
          format: int64
        maxAllowedDepts:
          type: integer
          format: int64

  CallLogs:
    type: object
    properties:
      id:
        type: integer
        format: int64
      callFrom:
        type: string
      callTo:
        type: string
      callPlacedAt:
        type: string
      callDuration:
        type: string
      callExtension:
        type: string
  
  Extensions:
    type: object
    properties:
      id:
        type: integer
        format: int64
      extension:
        type: string
      userId:
        type: integer
        format: int64
      department:
        type: integer
        format: int64
      sipServer:
        type: string
      sipUsername:
        type: string
      sipPassword:
        type: string
      sipPort:
        type: string

  Wallet:
    type: object
    properties:
      id:
        type: integer
        format: int64
      charge:
        type: string
        enum: ["credit", "debit"]
      reason:
        type: string
      cost:
        type: integer
        format: int64
        description: Please note that we will be saving the numbers upto 2 decimal places as actual numbers, So if you need to save 100 it will become 10000, and 79.99 will become 7999
      epoch:
        type: string
        description: UNIX epoch
      companyId:
        type: integer
        format: int64
